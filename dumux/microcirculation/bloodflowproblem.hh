// -*- mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
// vi: set et ts=4 sw=4 sts=4:
//
// SPDX-FileCopyrightInfo: Copyright Â© Timo Koch
// SPDX-License-Identifier: GPL-3.0-or-later
//
/*!
 * \file
 * \ingroup Microcirculation
 * \brief A test problem for the one-phase blood flow model:
 * Blood is flowing through a 1d network grid.
 */
#ifndef DUMUX_BLOOD_FLOW_PROBLEM_HH
#define DUMUX_BLOOD_FLOW_PROBLEM_HH

#include <algorithm>
#include <memory>

#include <dumux/common/parameters.hh>
#include <dumux/common/properties.hh>
#include <dumux/common/boundarytypes.hh>
#include <dumux/common/numeqvector.hh>
#include <dumux/porousmediumflow/problem.hh>

namespace Dumux {

/*!
 * \ingroup Microcirculation
 * \brief The bloodflow problem for the flow solver
 */
template <class TypeTag>
class BloodFlowProblem : public PorousMediumFlowProblem<TypeTag>
{
    using ParentType = PorousMediumFlowProblem<TypeTag>;
    using Scalar = GetPropType<TypeTag, Properties::Scalar>;
    using VolumeVariables = GetPropType<TypeTag, Properties::VolumeVariables>;
    using Indices = typename GetPropType<TypeTag, Properties::ModelTraits>::Indices;
    using PrimaryVariables = typename VolumeVariables::PrimaryVariables;
    using ResidualVector = Dumux::NumEqVector<PrimaryVariables>;
    using BoundaryTypes = Dumux::BoundaryTypes<PrimaryVariables::size()>;
    using GridGeometry = GetPropType<TypeTag, Properties::GridGeometry>;
    using FVElementGeometry = typename GridGeometry::LocalView;
    using SubControlVolume = typename GridGeometry::SubControlVolume;
    using SubControlVolumeFace = typename GridGeometry::SubControlVolumeFace;
    using SolutionVector = GetPropType<TypeTag, Properties::SolutionVector>;
    using GridVariables = GetPropType<TypeTag, Properties::GridVariables>;
    using GridView = typename GridGeometry::GridView;
    using Element = typename GridView::template Codim<0>::Entity;
    using GlobalPosition = typename Element::Geometry::GlobalCoordinate;

public:
    template<class GridData>
    BloodFlowProblem(std::shared_ptr<const GridGeometry> gridGeometry,
                     const GridData& gridData,
                     const std::string& paramGroup = "")
    : ParentType(gridGeometry, paramGroup)
    {
        // read parameters from input file
        name_ = getParam<std::string>("Problem.Name");
        p_in_ = getParam<Scalar>("BoundaryConditions1D.PressureInput");
        delta_p_ = getParam<Scalar>("BoundaryConditions1D.DeltaPressure");

        // read radius and velocity estimate from file
        this->spatialParams().readGridParams(gridData);

        // mapping from element index to boundaryFlag
        setBoundaryDomainMarker_(gridData);
    }

    /*!
     * \name Problem parameters
     */
    // \{

    /*!
     * \brief The problem name.
     *
     * This is used as a prefix for files generated by the simulation.
     */
    const std::string& name() const
    { return name_; }

    // \}
    /*!
     * \name Boundary conditions
     */
    // \{

   /*!
     * \brief Specifies which kind of boundary condition should be
     *        used for which equation on a given boundary segment.
     *
     * \param globalPos The global position
     */
    BoundaryTypes boundaryTypes(const Element &element,
                                const SubControlVolumeFace& scvf) const
    {
        BoundaryTypes bcTypes;
        bcTypes.setAllDirichlet();

        switch (boundaryDomainMarker_[scvf.insideScvIdx()])
        {
            case 1: // inflow boundaries
                bcTypes.setNeumann(Indices::pressureIdx);
                break;
            case 2: // outflow boundaries
                bcTypes.setDirichlet(Indices::pressureIdx);
                break;
            default:
                DUNE_THROW(Dune::InvalidStateException,
                             "Unknown boundary marker for element " << scvf.insideScvIdx());
        }

        return bcTypes;
    }

    /*!
     * \brief Evaluate the boundary conditions for a dirichlet
     *        control volume.
     *
     * \param globalPos The global position
     *
     * For this method, the \a values parameter stores primary variables.
     */
    PrimaryVariables dirichletAtPos(const GlobalPosition& globalPos) const
    {
        PrimaryVariables values(0.0);
        values[Indices::pressureIdx] = p_in_ - delta_p_;
        return values;
    }

    /*!
     * \brief Evaluate the boundary conditions for a neumann
     *        boundary segment.
     *
     * For this method, the \a priVars parameter stores the mass flux
     * in normal direction of each component. Negative values mean
     * influx.
     */
    template<class ElementVolumeVariables, class ElementFluxVarsCache>
    ResidualVector neumann(const Element& element,
                           const FVElementGeometry& fvGeometry,
                           const ElementVolumeVariables& elemVolVars,
                           const ElementFluxVarsCache& elemFluxVarsCache,
                           const SubControlVolumeFace& scvf) const
    {
        ResidualVector values(0.0);
        const auto vel = this->spatialParams().velocityEstimate(scvf.insideScvIdx());
        values[Indices::conti0EqIdx] = -vel*elemVolVars[scvf.insideScvIdx()].density();
        return values;
    }

    // \}

    /*!
     * \name Volume terms
     */
    // \{

    /*!
     * \brief Evaluate the initial value for a control volume.
     *
     * For this method, the \a priVars parameter stores primary
     * variables.
     */
    PrimaryVariables initialAtPos(const GlobalPosition &globalPos) const
    { return PrimaryVariables({1.0e5}); }

    // \}

    /*!
     * \brief Adds additional VTK output data to the VTKWriter. Function is called by the output module on every write.
     */
    template<class VtkOutputModule>
    void addVtkOutputFields(VtkOutputModule& vtk) const
    {
        vtk.addField(this->spatialParams().getRadii(), "radius");
        vtk.addField(this->spatialParams().getRelEffViscosity(), "mu_releff");
        vtk.addField(this->spatialParams().getTubeHematocrit(), "h_t");
    }

private:

    template<class GridData>
    void setBoundaryDomainMarker_(const GridData& gridData)
    {
        const auto& gg = this->gridGeometry();
        boundaryDomainMarker_.resize(gg.gridView().size(0));

        for (const auto& element : elements(gg.gridView()))
        {
            if (!element.hasBoundaryIntersections())
                continue;

            auto ancestor = element;
            while (ancestor.hasFather())
                ancestor = ancestor.father();

            for (const auto& intersection : intersections(gg.gridView().grid().levelGridView(0), ancestor))
            {
                if (intersection.boundary())
                {
                    const auto vertex = ancestor.template subEntity<1>(intersection.indexInInside());
                    boundaryDomainMarker_[gg.elementMapper().index(element)] = gridData.parameters(vertex)[0];
                }
            }
        }
    }

    static constexpr Scalar eps_ = 1.5e-7;
    std::string name_;

    // boundary conditions
    Scalar p_in_;
    Scalar delta_p_;

    std::vector<int> boundaryDomainMarker_;
};

} //end namespace Dumux

#endif
